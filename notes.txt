Adding alias
https://www.youtube.com/watch?v=F6DeTJ-O1KY

Syncing 1 files for ashboro/multi-client:29bf4dc317c612ba2b2d27d8fe3bdd0190f3df076bdfd5de1fa2d80994d15f5f


apiVersion: skaffold/v1beta2
kind: Config
build:
  local:
    push: false
  artifacts:
    - image: ashboro/multi-client
      context: client
      docker:
        dockerfile: Dockerfile.dev
      sync:
        '**/*.js': .
        '**/*.css': .
        '**/*.html': .
    #- image: ashboro/multi-server
    #  context: server
    #  docker:
    #    dockerfile: Dockerfile.dev
    #  sync:
    #    '**/*.js': .
    #- image: ashboro/multi-worker
    #   context: worker
    #  docker:
    #    dockerfile: Dockerfile.dev
    #  sync:
    #    '**/*.js': .
deploy:
  kubectl:
    manifests:
      - k8s/client-deployment.yaml
      #- k8s/server-deployment.yaml
      #- k8s/worker-deployment.yaml
      #- k8s/server-cluster-ip-service.yaml
      #- k8s/client-cluster-ip-service.yaml

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

PS D:\docker\try\udemy259>


Ruby Version Fix
updated 7-27-2020

In the upcoming lecture, we will be installing Travis inside a Docker container. This will now require using the v2.4 version of Ruby instead of v2.3 as shown in the video. The command will now look like this:

docker run -it -v $(pwd):/app ruby:2.4 sh

With this version, we will no longer be passing the --no-rdoc or --no-ri flags when installing Travis. The command will simply be:

gem install travis


-----

docker run -it -v ./app:/app ruby:2.4 sh

travis encrypt-file service-account.json -r ashboro/multi-k8s -com
---

Fixes for Travis "iv undefined" or"repository not known"
updated 7-9-2020

In the upcoming lecture we will be encrypting a service account file in the Travis container we created in the previous lecture. 
Travis is currently going through some transitions (.com vs .org), and you may end up getting an error like this when deploying:

iv undefined
The command "openssl aes-256-cbc -K $encrypted_0c35eebf403c_key -iv $encrypted_0c35eebf403c_iv -in service-account.json.enc -out service-account.json -d" failed and exited with 1 during .

or, you may get:
repository not known to https://api.travis-ci.org

Depending on which domain your github repo was authorized, you may need to pass a specific flag to both the login and the file encryption:

travis login --com

or

travis login --org

or

travis login --pro

...

travis encrypt-file service-account.json -r USERNAME/REPO --com

or

travis encrypt-file service-account.json -r USERNAME/REPO --org

or

travis encrypt-file service-account.json -r USERNAME/REPO --pro

If you are getting the iv undefined error after a deployment, you'll need to run through the entire encryption process again, instead, following the instructions above.

Important Note: You can also get an iv undefined error if you've passed the wrong repo to the file encryption or passed a repo name with a typo in it.


------------------------- 276 ------  

Fix For Failing Travis Builds
In the upcoming lecture we will be adding a script to our .travis.yml file. Similar to our previous projects that ran tests using Travis, we need to make sure the tests exit after running and don't cause our builds to fail.

Make sure to change this script:

script:
  - docker run USERNAME/docker-react npm run test -- --coverage
To use the CI flag and remove coverage:

script:
  - docker run -e CI=true USERNAME/docker-react npm run test




  kubectl create secret generic pgpassword --from-literal PGPASSWORD=pass123

  --------------------------284 -------------------------------

  Helm v3 Update
This note is if you wish to use the latest version of Helm, which is now v3. This is a major update, as it removes the use of Tiller.

1. Install Helm v3:

In your Google Cloud Console run the following:

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
 
link to the docs:

https://helm.sh/docs/intro/install/#from-script

2. Skip the commands run in the following lectures:

Helm Setup, Kubernetes Security with RBAC, Assigning Tiller a Service Account and Ingress-Nginx with Helm. You should still watch these lectures and they contain otherwise useful info.

3. Install Ingress-Nginx:

In your Google Cloud Console run the following:

helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm install my-release ingress-nginx/ingress-nginx
 
Link to the docs:

https://kubernetes.github.io/ingress-nginx/deploy/#using-helm

This note is for students who wish to continue using v2 of Helm with Tiller and follow along with the next few lectures.

In your Google Cloud console, instead of the install instructions provided in the Helm Setup lecture, run the following commands:

----


From Script
Helm now has an installer script that will automatically grab the latest version of Helm and install it locally.

You can fetch that script, and then execute it locally. It's well documented so that you can read through it and understand what it is doing before you run it.

$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh


+++++++++++++++++++++++++++++

Synergy QA specialists have solid knowledge of various Quality Assurance software tools, such as 
-	Jasmine - a behavior-driven development framework for testing JavaScript code
-	Gatling – a load and performance testing framework
-	Locust - a user load testing tool, intended for load-testing web sites (or other systems) and figuring out how many concurrent users a system can handle.
-	Junit – a unit testing framework for the Java programming language.
